package com.kh.ex;

import java.util.Scanner;

public class ArrayEx {
    Scanner sc = new Scanner(System.in);
    /*
    * 배열(자료구조)
    *
    * - JAVA에서의 배열
    * -> 같은 자료형의 변수를 하나의 묶음으로 다루는 것
    *
    * - 생성된 배열의 요소는 index를 이용해서 구분한다
    *
    * -생성된 배열을 활용하기 위해서는 배열을 참조하는 "참조형 변수"를 이용해야한다.
    *
    * [참조형 변수]
    * - 주소를 저장하는 변수
    *
    * - 변수 사용 시 저장된 주소로 찾아가서 그 곳에 위치한 배열, 객체를 참조
    *
    * - 기본 자료형 8개를 제외한 나머지는 모두 참조형 변수
    * * 기본 자료형 = byte, short, int, long, char, boolean, float, double
    * 대표적인 참조 자료형 = String, Scanner, ...등 이외 우리가 모든 자료형이 될 수 있음
    *
    * 자료형의 맨 앞글자가 소문자로 시작하면 기본 자료형
    * 자료형의 맨 앞글자가 대문자로 시작하면 개발자가 만들어놓은 참조 자료형
    * */
    /*
    * 자료형언어를 입력할 때 동일한 타입이어야 한다.
    * 자바 배열은 int로 시작하면 전부다 int, String으로 시작하면 전부다 String으로만 배열을 짤 수 있다.
    * */
    /*
    * 배열 할당, 선언
    * */

    public void method1(){
        //변수 선언
        int num;
        //Stack 영역에 int 자료형을 저장할 수 있는 변수를 생성한다, 변수의 이름은 "num"으로 지정

        //배열 선언
        int[] arr;
        // Stack 영역에 int[] 자료형을 참조할 변수를 생성하고 (주소저장), 그 변수의 이름을 "arr"로 지정

        //배열 할당
        arr = new int[4];
        //Heap 영역에 int 10개짜리 배열을 할당한 후 생성된 배열의 주소를 "arr"변수에 대입

        //arr을 이용해서 배열을

        // 1) 초기화 전 -> 0이 대입되어있는지 확인
        System.out.println("초기화 전");

        // bug : 프로그램 수행 중 발생하는 오류 (==error)
        // debug : 프로그램 수행 중 특정 시점에 어떤 값을 지니고 있는지 확인하는 것 -> 코드 상태, 오류를 분석할 수 있음

        // 2) 인덱스를 이용한 초기화
        arr[0] = 100;
        arr[1] = 200;
        arr[2] = 3000;
        arr[3] = 5;


        System.out.println("초기화 후");

        /*
        배열은 JS와 마찬가지로
        index = 0번부터 시작, 각 값의 자리번호를 매김하는 기능
        length = 1번부터 시작해서 총 길이를 표현하는 기능

       초기화 전
        [Stack]                        [heap]
        +---------------+       +----------------+
        |   arr(주소)   | ----> |[0] [1] [2] [3] |
        +---------------+       | 0   0   0   0  |
                                +----------------+
==================================================================================
        값들을 넣어 초기화 한 상태

        arr[0] = 100;
        arr[1] = 200;
        arr[2] = 3000;
        arr[3] = 5;


         [Stack]                        [heap]
        +---------------+       +----------------+
        |   arr(주소)   | ----> |[0] [1] [2] [3] |
        +---------------+       |100 200 3000 5  |
                                +----------------+
        * */
        /*
        * 초기화전
        * int[] arr; 실행 시
        *       -Stack 에 arr 변수 생성 (현재는 주소가 없는상태);
        *
        * arr = new int[4] 실행 시
        *       - Heap 크기 4짜리 배열이 생성되고 초기값은 0으로 설정
        *       - Heap 에 생성된 배열의 시작주소가 Stack 의 arr 에 저장됨
        *       이제 arr 은 Heap 의 배열을 참조할 수 있음
        *
        *   결과적으로
        *       Stack : arr 변수는 Heap 배열의 주소를 가짐
        *       Heap : 배열이 생성되어 초기화된 상태
        *
        * arr[0] = 100; arr[1] = 200; arr[2] = 3000; arr[3] = 5; 값을 넣었을 때
        *       - Heap 에 있는 배열의 각 index 에 지정된 값을 저장
        *       Stack : arr 변수에는 Heap 에 있는 배열의  주소값이 저장됨
        *       Heap : 주소가 가리키는 배열이 각 index 에 할당된 값을 포함
        * */













    }

    public void method2(){
        int x= 10; // Stack 에 저장
        int[] arr = new int[3]; // Heap 에 저장
        arr[0] = 100; // Heap 공간에 첫 번째 칸에 100을 저장

        /*
        * Stack : 메모장
        * 간단히 메모하고 지우는 공간
        * 프로그램이 끝나면 메모지도 자동으로 치워짐
        *
        * Heap : 창고
        * 큰 물건을 저장하고 필요할 때 주소를 이용해 꺼내씀
        * 창고에 저장한 물건은 직접 정리를 해야함. 그래야만 나중에 어디에 데이터가 있는지 알고 찾을 수 있음
        * */
    }
}
